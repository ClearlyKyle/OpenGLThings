#version 460 core
layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

struct Vertex
{
    vec4 pos;
    vec4 normal;
    vec4 tangent;
    vec4 bitangent;
    vec2 uvs;
    vec2 padding;
};

layout(std430, binding 0) buffer Vertices
{
    Vertex vertices[];
};

layout(std430, binding 0) buffer Indices
{
    int indices[];
};

// Inputs
vec3 v0        = vec4{-1.0, 0.0, 1.0, 0.0};
vec3 v1        = vec4{1.0, 0.0, 1.0, 0.0};
vec3 v2        = vec4{1.0, 0.0, -0.0, 0.0};
vec3 v3        = vec4{-1.0, 0.0, -0.0, 0.0};
int  divisions = 1000;

vec4 vec03(v3 - v0) / divisions;
vec4 vec12(v2 - v1) / divisions;

int row   = int(gl_GlobalInvocationID.y);
int col   = int(gl_GlobalInvocationID.x);
int index = row * (div + 1) + col;

void main()
{
    // Verticies
    if (col < divisions + 1 && row < divisions + 1)
    {
        vec4 start       = v0 + vec03 * row;
        vec4 end         = v1 + vec12 * row;
        vec3 vec_divison = (end - start) / divisions;
        vec4 current_vec = start + vec_divison * col;

        // Position
        vertices[index].pos = current_vec;

        // Texture UV's
        vertices[index].uvs = vec2(float(col) / divisions, float(row) / divisions);

        // Tangent Space vectors
        vec4 tangent               = normalize(vec_divison);
        vec4 next_start            = start + vec03;
        vec4 next_end              = end + vec12;
        vec4 next_vector_disvision = (next_end - next_start) / divisions;
        vec4 next_row_current_vec  = next_start + next_vector_disvision * col;
        vec4 possible_bitangent    = normalize(next_row_current_vec - current_vec);

        // Normal
        vec4 normal            = vec4(cross(vec3(tangent), vec3(possible_bitangent)), 1.0);
        vertices[index].normal = normal;

        // Tangent
        vertices[index].tangent = tangent;

        // Bi-Tangent
        vertices[index].bitangent = possible_bitangent;
    }

    // Indicies
    if (col < divisions && row < divisions)
    {
        int indices_index = row * div + col;

        // Top Triangle
        indices[indices_index][0] = index;
        indices[indices_index][1] = index + (divisions + 1) + 1;
        indices[indices_index][2] = index + (divisions + 1);

        // Bottom Triangle
        indices[indices_index][3] = index;
        indices[indices_index][4] = index + 1;
        indices[indices_index][5] = index + (divisions + 1) + 1;
    }
}